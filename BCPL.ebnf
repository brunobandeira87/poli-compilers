grammar BCPL;

// Identifiers, Strings and Numbers

Letter                              : 'A'..'Z';

Digit                               : '0'..'9';

Space                               : ' ' | '\t' | '\r' | '\n';

number                              : (Digit)+;

identifier                          : Letter (Letter | Digit)*;

stringConstant                      :  '"' (Letter | Digit | Space)* '"';

// Operators

MultiplicationOperator              : '*' | '/';

AddOperator                         : '+' | '-';

ComparationOperator                 : '=' | '~=' | '<=' | '>=' | '<' | '>';

AndOperator                         : '&';

OrOperator                          : '|';

EquivalenceOperator                 : 'EQV' | 'NEQV';

NotOperator                         : '~';

// Expressions

element                             : stringConstant | number | identifier | 'TRUE' | 'FALSE';

primaryExpression                   : primaryExpression '(' expressionList ')' | primaryExpression '(' ')' | '(' expression ')' | element;

multiplicationExpression            : multiplicationExpression MultiplicationOperator primaryExpression | primaryExpression;

addExpression                       : addExpression AddOperator multiplicationExpression | AddOperator multiplicationExpression | multiplicationExpression;

relExpression                       : addExpression (ComparationOperator addExpression)?;

notExpression                       : NotOperator relExpression | relExpression;

andExpression                       : notExpression (AndOperator notExpression)*;

orExpression                        : andExpression (OrOperator andExpression)*;

equivalenceExpression               : orExpression (EquivalenceOperator orExpression)*;

conditionalExpression               : equivalenceExpression '->' conditionalExpression ',' conditionalExpression | equivalenceExpression;

expression                          : conditionalExpression | 'VALOF' command;

expressionList                      : expression (',' expression)*;

// Constant Expressions

constantElementExpression           : number | identifier | 'TRUE' | 'FALSE';

constantMultiplicationExpression    : constantMultiplicationExpression MultiplicationOperator constantElementExpression | constantElementExpression;

constantAddExpression               : constantAddExpression AddOperator constantMultiplicationExpression | AddOperator constantMultiplicationExpression | constantMultiplicationExpression;

constantAndExpression               : constantAndExpression AndOperator constantAddExpression | constantAddExpression;

constantExpression                  : constantExpression OrOperator constantAndExpression | constantAndExpression;

// Declarations

identifierList                      : identifier (',' identifier)*;

functionDefinition                  : identifier '(' identifierList ')' '=' expression | identifier '(' ')' '=' expression;

routineDefinition                   : identifier '(' identifierList ')' 'BE' command | identifier '(' ')' 'BE' command;

variableDefinition                  : identifierList '=' expressionList;

definition                          : functionDefinition | routineDefinition | variableDefinition;

declaration                         : 'LET' definition ('AND' definition)*;

declarationList                     : declaration (';' declaration)*;

// LHS Expressions

leftHandSideExpression              : identifier | '!' primaryExpression;

leftHandSideList                    : leftHandSideExpression (',' leftHandSideExpression)*;

// Commands

assignment                          : leftHandSideList ':=' expressionList;

simpleCommand                       : 'BREAK' | 'LOOP' | 'RETURN';

routineCommand                      : primaryExpression '(' expressionList ')' | primaryExpression '(' ')';

resultsCommand                      : 'RESULTIS' expression;

whileCommand                        : 'WHILE' expression 'DO' expression;

ifCommand                           : 'IF' expression 'THEN' command;

unlessCommand                       : 'UNLESS' expression 'THEN' command;

conditionalCommand                  : ifCommand (unlessCommand)?;

command                             : assignment | resultsCommand | routineCommand | whileCommand | conditionalCommand;

commandList                         : command (';' command)*;

// Blocks and Compound Statements

block                               : '$(' declarationList ';' commandList '$)';

compoundCommand                     : '$(' commandList '$)';

program                             : declarationList;
